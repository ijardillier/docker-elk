version: '3.8'

services:

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    volumes:
      - type: bind
        source: ./prometheus/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: volume
        source: prometheus_data
        target: /usr/share/prometheus/data
    ports:
      - "9090:9090"
    mem_limit: ${MEM_LIMIT}
    networks:
      - default

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es00
    volumes:
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${LOGSTASH_PASSWORD} == x ]; then
          echo "Set the LOGSTASH_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${BEATS_PASSWORD} == x ]; then
          echo "Set the BEATS_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${REMOTE_MONITORING_PASSWORD} == x ]; then
          echo "Set the REMOTE_MONITORING_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: apm-server\n"\
          "    dns:\n"\
          "      - apm-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 750 \{\} \;;
        find config/certs -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting logstash_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting beats_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/beats_system/_password -d "{\"password\":\"${BEATS_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting remote_monitoring_user password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${REMOTE_MONITORING_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es01
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certs
        read_only: true
      - type: volume
        source: es01_data
        target: /usr/share/elasticsearch/data
    ports:
      - ${ES01_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es02
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certs
        read_only: true
      - type: volume
        source: es02_data
        target: /usr/share/elasticsearch/data
    ports:
      - ${ES02_PORT}:9200
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es01,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es03
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certs
        read_only: true
      - type: volume
        source: es03_data
        target: /usr/share/elasticsearch/data
    ports:
      - ${ES03_PORT}:9200
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es01,es02
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I -u elastic:${ELASTIC_PASSWORD} --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    restart: on-failure
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/kibana/config/certs
        read_only: true
      - type: volume
        source: kibana_data
        target: /usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  fleet-server:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: fleet-server
    user: elastic-agent
    restart: on-failure
    volumes:
      - type: bind
        source: ./fleet-server/config/elastic-agent.yml
        target: /usr/share/elastic-agent/elastic-agent.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elastic-agent/certs
        read_only: true
    ports:
      - ${FLEET_SERVER_PORT}:8220
    environment:
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - FLEET_SERVER_POLICY_ID=fleet_server_policy
      - FLEET_ENROLL=1
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:6791/processes | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  apm-server:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
      kibana:
        condition: service_healthy
      fleet-server:
        condition: service_healthy
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: apm-server
    user: elastic-agent
    restart: on-failure
    volumes:
      - type: bind
        source: ./apm-server/config/elastic-agent.yml
        target: /usr/share/elastic-agent/elastic-agent.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elastic-agent/certs
        read_only: true
    ports:
      - ${APM_SERVER_PORT}:8200
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleet-server:${FLEET_SERVER_PORT}
      - FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      #- FLEET_ENROLLMENT_TOKEN=d05NdnRvWUJVaEFqakk1R1pIc0k6Tk1tOGp4RTNTM3loaHIxNHJTWlVDZw==
      - FLEET_TOKEN_POLICY_NAME=APM Server Policy
      - FLEET_INSECURE=true
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:6791/processes | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  filebeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat
    user: root
    restart: on-failure
    volumes:
      - type: bind
        source: ./filebeat/config/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        read_only: true
      - type: bind
        source: ./filebeat/config/inputs.d
        target: /usr/share/filebeat/inputs.d
        read_only: true
      - type: bind
        source: ./filebeat/config/modules.d
        target: /usr/share/filebeat/modules.d
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/filebeat/certs
        read_only: true
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/log:/hostfs/var/log:ro"
      - "/home/ingrid:/hostfs/home/ingrid:ro"
    command: filebeat -e -strict.perms=false
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default

  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    container_name: metricbeat
    user: root
    restart: on-failure
    volumes:
      - type: bind
        source: ./metricbeat/config/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      - type: bind
        source: ./metricbeat/config/modules.d
        target: /usr/share/metricbeat/modules.d
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/metricbeat/certs
        read_only: true
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /run/systemd/private:/run/systemd/private:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    command: metricbeat -e -strict.perms=false
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default

  heartbeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
    container_name: heartbeat
    restart: on-failure
    volumes:
      - type: bind
        source: ./heartbeat/config/heartbeat.yml
        target: /usr/share/heartbeat/heartbeat.yml
        read_only: true
      - type: bind
        source: ./heartbeat/config/monitors.d
        target: /usr/share/heartbeat/monitors.d
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/heartbeat/certs
        read_only: true
    command: heartbeat -e -strict.perms=false
    cap_add:
      - NET_RAW
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default

  auditbeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/beats/auditbeat:${STACK_VERSION}
    container_name: auditbeat
    user: root
    restart: on-failure
    volumes:
      - type: bind
        source: ./auditbeat/config/auditbeat.yml
        target: /usr/share/auditbeat/auditbeat.yml
        read_only: true
      - type: bind
        source: ./auditbeat/config/modules.d
        target: /usr/share/auditbeat/modules.d
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/auditbeat/certs
        read_only: true
    command: auditbeat -e -strict.perms=false
    cap_add:
      - AUDIT_CONTROL
      - AUDIT_READ
    pid: host
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default

  packetbeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/beats/packetbeat:${STACK_VERSION}
    container_name: packetbeat
    #user: root
    restart: on-failure
    volumes:
      - type: bind
        source: ./packetbeat/config/packetbeat.yml
        target: /usr/share/packetbeat/packetbeat.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/packetbeat/certs
        read_only: true
    command: packetbeat -e -strict.perms=false
    cap_add:
      - NET_ADMIN
      - NET_RAW
    pid: host
    mem_limit: ${AGENT_MEM_LIMIT}
    networks:
      - default

  logstash:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    user: root
    restart: on-failure
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/config/pipelines.yml
        target: /usr/share/logstash/config/pipelines.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: volume
        source: logstash_data
        target: /usr/share/logstash/data
      - type: volume
        source: certs
        target: /usr/share/logstash/certs
        read_only: true
    ports:
      - ${LS_PORT}:9600
      - "5000:5000"
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "${LS_JAVA_OPTS}"
    mem_limit: ${MEM_LIMIT}
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9600 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

networks:
  default:
    name: elk_bridge
    driver: bridge

volumes:
  certs:
    name: certs
    driver: local
  prometheus_data:
    name: prometheus_data
    driver: local
  es01_data:
    name: es01_data
    driver: local
  es02_data:
    name: es02_data
    driver: local
  es03_data:
    name: es03_data
    driver: local
  kibana_data:
    name: kibana_data
    driver: local
  logstash_data:
    name: logstash_data
    driver: local
