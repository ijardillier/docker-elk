services:

  synthetic-setup:
    depends_on:
      fleet-server:
        condition: service_healthy
    image: ijardillier/elastic-synthetics-node:latest
    container_name: synthetic-setup
    hostname: synthetic-setup
    user: "0"
    volumes:
      - type: bind
        source: ./extensions/synthetics/synthetic-setup/config/
        target: /opt/synthetic-setup/config
      - type: volume
        source: certs
        target: /opt/synthetic-setup/certs
        read_only: true
    command: /bin/sh -c "chmod a+x /opt/synthetic-setup/config/setup.sh && ELASTIC_PASSWORD=${ELASTIC_PASSWORD} /opt/synthetic-setup/config/setup.sh"
    networks:
      - default

  synthetic-private-location:
    depends_on:
      fleet-server:
        condition: service_healthy
    image: docker.elastic.co/elastic-agent/elastic-agent-complete:${ELASTIC_STACK_VERSION}
    container_name: synthetic-private-location
    hostname: synthetic-private-location
    user: elastic-agent
    restart: on-failure
    volumes:
      - type: bind
        source: ./extensions/synthetics/synthetic-private-location/config/elastic-agent.yml
        target: /usr/share/elastic-agent/elastic-agent.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/elastic-agent/certs
        read_only: true
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    cap_add:
      - NET_RAW
      - SETUID
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleet-server:${FLEET_SERVER_PORT}
      - FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - FLEET_TOKEN_POLICY_NAME=Synthetic Private Location Policy
    mem_limit: ${SYNTHETIC_PRIVATE_LOCATION_MEM_LIMIT}
    networks:
      - default